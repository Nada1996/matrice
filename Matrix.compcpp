#include <iostream>
#include <string>
#include <cstdlib>
#include <math.h>
#include <sstream>
using namespace std;

class complex
{public :
float real,image;

void add(complex x,complex y)
{
    real=x.real+y.real;
    image=x.image+y.image;
}
void substract(complex x,complex y)
{
    real=x.real-y.real;
    image=x.image-y.image;
}
void multip(complex x,complex y)
{
    real=(x.real*y.real)-(x.image*y.image);
    image=x.real*y.image+x.image*y.real;



}
void print()
{if(image!=0)
   {if(image>0)
   {cout<<real<<"+"<<image<<"i";}
   else
   {cout<<real<<image<<"i";}
}
else
{cout<<real;}
}

void stoc (string a)
{int p=a.find("+",0),n=a.find("-",0),c=a.find("i",0);int x=0,b[3],l=a.length()-2,l1=l+1;
for(int i=0;i<(a.length())-1;i++)
  {string h=a.substr(i,1);
	  if(h=="-")
	  {x++;}
  } 

b[0]=n;
for(int i=1;i<x;i++)
  {b[i]=a.find("-",b[0]+1);
  } 



if(c>-1)
{     if(p>-1)
       {real=atof(a.substr(0,p).c_str());
        image=atof(a.substr(p+1,l-p).c_str());
       }
     else if(n>-1 )
      {    if(x==1)
            {   if(n>0)
                 {   real=atof(a.substr(0,n).c_str());
                 image=atof(a.substr(n,l-n+1).c_str());
                 }
                 else
                {real=0;string d=a.substr(0,l1);image=atof(d.c_str());}
            }

        else if(x>1)
            {string d=a.substr(0,b[1]),d1=a.substr(b[1],l1-b[1]);
             real=atof(d.c_str());
	         image=atof(d1.c_str());
            }

      }



else if(n<0 && p<0)
{string z=a.substr(0,c);
 real=0;
 image=atof(z.c_str());
}

}
else
{real=atof(a.c_str());
 image=0;
}


}


};
void getmatrix(string s , complex Matrix[][100], int &r , int &c)
{
    string u1,D[100];  getline(cin,s);
 int x=s.length() ; u1=s.substr(1,x-2); int i,k=0,o,p=0;float j[100];

for( int i=0; i<u1.length(); i++ ) 
 {if(u1.substr(i,1)==";")
 {k++;
}
 }

for( int i=0; i<u1.length(); i++ ) 
 {if(u1.substr(i,1)==" ")
      {p++;
      }
 }
 r = k+1 ; int sp=(p/r) ;  c = sp +1;
  if (p%r != 0 )
  {cout<<"ERROR";
  exit(0);
  }
 float H[10000] ; H[0]=u1.find(" ",0);
 for(i=1;i<p;i++)
{H[i]=u1.find(" ",(H[i-1]+1));
}
if(k==0)
{r=1;
D[0]=u1;float t = D[0].length();
Matrix[0][0].stoc(D[0].substr(0,H[0]));

Matrix[0][sp].stoc(D[0].substr((H[sp-1]+1),(t-H[sp-1])));
for(i=1;i<sp;i++)
{Matrix[0][i].stoc(D[0].substr((H[i-1]+1),(H[i]-H[i-1])));
}

}
else
{float t = D[0].length(); 
  j[0]=u1.find(";",0);
    for(i=1;i<k;i++)
      {j[i]=u1.find(";",(j[i-1]+1));
	  }
D[0]=u1.substr(0,j[0]);
   for(i=1;i<(k+1);i++)
      {D[i]=u1.substr((j[i-1]+1),((j[i]-1)-j[i-1]));
       } 

  
  
Matrix[0][0].stoc(D[0].substr(0,H[0]));

Matrix[0][sp].stoc(D[0].substr((H[sp-1]+1),(t-H[sp-1])));


for(i=1;i<sp;i++)
{Matrix[0][i].stoc(D[0].substr((H[i-1]+1),(H[i]-H[i-1])));
}


for(i=1;i<r;i++)
{
string z = u1.substr(0,j[i-1]) ; float R = z.length(); float x1= H[sp-1+i*sp];
 float l = D[i].length()-1;

Matrix[i][sp].stoc(D[i].substr(x1-R,l-x1));
}
 


for(i=1;i<r;i++)
{ string z = u1.substr(0,j[i-1]) ; float R = z.length();
    Matrix[i][0].stoc(D[i].substr(0,(H[i*sp]-R))); 
   
}
 
for(i=1;i<r;i++)
          { string z = u1.substr(0,j[i-1]) ; float R = z.length();
     for(o=1;o<sp;o++)
           { Matrix[i][o].stoc(D[i].substr(H[o-1+i*sp]-R,H[o+i*sp]-(H[o-1+i*sp]+1)));
    
	         }
          }

       }
}
string out(complex a)
{ ostringstream ss,ff;
ss<<a.real;ff<<a.image;
     string  F = ss.str();
	  string  s = ff.str();
  string r;
if((a.image)!=0)
{ if((a.image)>0)
   {r=F+"+"+s+"i";}
   else
   {r=F+s+"i";}
}
else
{r=F;}
  return r;
	 
}
void coutmat (complex cmat[][100], int r,int c)
{
	int i,o,sp=c-1;
cout<<"["; 

for(i=0;i<r-1;i++)
{ for(o=0;o<c-1;o++)
    {cout<<out(cmat[i][o]);
		cout<<" ";
    }
   cout<<out(cmat[i][sp]);
   cout<<";";
}
   
   for(o=0;o<c-1;o++)
    { cout<<out(cmat[r-1][o]);
		cout<<" ";
    }
    cout<<out(cmat[r-1][sp]);




cout<<"]";
}

int main()
{string s,s1;complex a[100][100],b[100][100],cmat[100][100];
     int r ,c,r1,c1,i,o;char op;float val;
    getmatrix(s,a,r,c); int sp=c-1;
   cin>>op;
   cin.ignore();
    
    switch (op)
{ case '+':
getmatrix(s1,b,r1,c1);
if(r==r1 && c==c1)
{	for(i=0;i<r;i++)
  {   for(o=0;o<c;o++)
       { cmat[i][o].add(a[i][o],b[i][o]);
	   }
	   o=o-c+1;
  } coutmat(cmat,r1,c1);
}
else
{cout<<"ERROR"; exit (0);
}

break;



case '-' :
getmatrix(s1,b,r1,c1);
if(r==r1 && c==c1)
{	for(i=0;i<r;i++)
  {   for(o=0;o<c;o++)
       { cmat[i][o].substract(a[i][o],b[i][o]);
	   }
	   o=o-c+1;
  } coutmat(cmat,r1,c1);
}
else
{cout<<"ERROR"; exit(0);
}
break;
case '*':
getmatrix(s1,b,r1,c1);
	if(c==r1)
{for(i=0;i<r;i++)
    
  {   for(o=0;o<c1;o++)
       {cmat[i][o].real=0,cmat[i][o].image=0;
	   for(int v=0;v<c;v++)
          {  complex cs;cs.multip(a[i][v],b[v][o]);
             cmat[i][o].add(cmat[i][o],cs); 
            }
	   }
	   
   }  
 coutmat(cmat,r,c1);  
}
else
{cout<<"ERROR"; exit(0);
}
break;
}
    
}
 